definitions:
  # the names of the functions - we use this to generate the code and to register the functions in
  # the javascript class
  ifunction: "lua_${generator.prefix}_${class_name}_${func_name}"
  sfunction: "lua_${generator.prefix}_${class_name}_${func_name}"
  constructor: "lua_${generator.prefix}_${class_name}_constructor"
conversions:
  # some times you want to use a special native type when converting from spidermonkey to native
  # the most common case would be from JS-boolean to bool. Using "bool" will fail here since we
  # pass the address to the conversion method, and a JSBool is defined as an integer in spidermonkey
  native_types:
    bool: "JSBool"
    float: "double"
    short: "int32_t"
    "unsigned char": "uint16_t"
    "char": "int32_t"
  to_native:
    # lua to int
    int: |
      \#if COCOS2D_DEBUG >= 1
      ${($level) * '\t'}if (!tolua_isnumber(tolua_S,${arg_idx},0,&tolua_err)) goto tolua_lerror;
      ${($level) * '\t'}\#endif
      ${($level) * '\t'}${out_value} = (int)tolua_tonumber(tolua_S,${arg_idx},0)

    "unsigned int": |
      \#if COCOS2D_DEBUG >= 1
      ${($level) * '\t'}if (!tolua_isnumber(tolua_S,${arg_idx},0,&tolua_err)) goto tolua_lerror;
      ${($level) * '\t'}\#endif
      ${($level) * '\t'}${out_value} = (unsigned int)tolua_tonumber(tolua_S,${arg_idx},0)

    "unsigned char": |
      \#if COCOS2D_DEBUG >= 1
      ${($level) * '\t'}if (!tolua_isnumber(tolua_S,${arg_idx},0,&tolua_err)) goto tolua_lerror;
      ${($level) * '\t'}\#endif
      ${($level) * '\t'}${out_value} = (unsigned char)tolua_tonumber(tolua_S,${arg_idx},0)
    short: |
      \#if COCOS2D_DEBUG >= 1
      ${($level) * '\t'}if (!tolua_isnumber(tolua_S,${arg_idx},0,&tolua_err)) goto tolua_lerror;
      ${($level) * '\t'}\#endif
      ${($level) * '\t'}${out_value} = (short)tolua_tonumber(tolua_S,${arg_idx},0)
    char:  |
      \#if COCOS2D_DEBUG >= 1
      ${($level) * '\t'}if (!tolua_isnumber(tolua_S,${arg_idx},0,&tolua_err)) goto tolua_lerror;
      ${($level) * '\t'}\#endif
      ${($level) * '\t'}${out_value} = (char)tolua_tonumber(tolua_S,${arg_idx},0)
    bool: |
      \#if COCOS2D_DEBUG >= 1
      ${($level) * '\t'}if (!tolua_isboolean(tolua_S,${arg_idx},0,&tolua_err)) goto tolua_lerror;
      ${($level) * '\t'}\#endif
      ${($level) * '\t'}${out_value} = (bool)tolua_toboolean(tolua_S,${arg_idx},0)
    float: |
      \#if COCOS2D_DEBUG >= 1
      ${($level) * '\t'}if (!tolua_isnumber(tolua_S,${arg_idx},0,&tolua_err)) goto tolua_lerror;
      ${($level) * '\t'}\#endif
      ${($level) * '\t'}${out_value} = (float)tolua_tonumber(tolua_S,${arg_idx},0)
    double: |
      \#if COCOS2D_DEBUG >= 1
      ${($level) * '\t'}if (!tolua_isnumber(tolua_S,${arg_idx},0,&tolua_err)) goto tolua_lerror;
      ${($level) * '\t'}\#endif
      ${($level) * '\t'}${out_value} = tolua_tonumber(tolua_S,${arg_idx},0)

    # jsval has to be a TypedArray, a UInt32Array with 2 elements
    "long long": |
      \#if COCOS2D_DEBUG >= 1
      ${($level) * '\t'}if (!tolua_isnumber(tolua_S,${arg_idx},0,&tolua_err)) goto tolua_lerror;
      ${($level) * '\t'}\#endif
      ${($level) * '\t'}${out_value} = (long long)tolua_tonumber(tolua_S,${arg_idx},0)
    "std::string": |
      \#if COCOS2D_DEBUG >= 1
      ${($level) * '\t'}if (!tolua_iscppstring(tolua_S,${arg_idx},0,&tolua_err)) goto tolua_lerror;
      ${($level) * '\t'}\#endif
      ${($level) * '\t'}${out_value} = tolua_tocppstring(tolua_S,${arg_idx},0)
    "const char*": |
      \#if COCOS2D_DEBUG >= 1
      ${($level) * '\t'}if (!tolua_isstring(tolua_S,${arg_idx},0,&tolua_err)) goto tolua_lerror;
      ${($level) * '\t'}\#endif
      ${($level) * '\t'}${out_value} = (const char*)tolua_tostring(tolua_S,${arg_idx},0)
    "Point": "ok &= jsval_to_ccpoint(cx, ${in_value}, &${out_value})"
    "Rect": "ok &= jsval_to_ccrect(cx, ${in_value}, &${out_value})"
    "Size": "ok &= jsval_to_ccsize(cx, ${in_value}, &${out_value})"
    "const Color4B": "ok &= jsval_to_cccolor4b(cx, ${in_value}, &${out_value})"
    "const Color4F": "ok &= jsval_to_cccolor4f(cx, ${in_value}, &${out_value})"
    "const Color3B": "ok &= jsval_to_cccolor3b(cx, ${in_value}, &${out_value})"
    "Color4B": "ok &= jsval_to_cccolor4b(cx, ${in_value}, &${out_value})"
    "Color4F": "ok &= jsval_to_cccolor4f(cx, ${in_value}, &${out_value})"
    "Color3B": "ok &= jsval_to_cccolor3b(cx, ${in_value}, &${out_value})"
    "Array*": "ok &= jsval_to_ccarray(cx, ${in_value}, &${out_value})"
    "Dictionary*": "ok &= jsval_to_ccdictionary(cx, ${in_value}, &${out_value})"
    "AffineTransform": "ok &= jsval_to_ccaffinetransform(cx, ${in_value}, &${out_value})"
    "FontDefinition":  "ok &= jsval_to_FontDefinition(cx, ${in_value}, &${out_value})"
    object: |
      if (!tolua_isusertype(tolua_S,${arg_idx},"${ntype}",0,&tolua_err)) goto tolua_lerror;
      ${($level) * '\t'}${out_value} = (${arg})tolua_tousertype(tolua_S,${arg_idx},0);

  from_native:
    # int to lua
    int: "tolua_pushnumber(tolua_S,(lua_Number)${in_value})"
    "unsigned int": "tolua_pushnumber(tolua_S,(lua_Number)${in_value})"
    "unsigned char": "tolua_pushnumber(tolua_S,(lua_Number)${in_value})"
    short: "tolua_pushnumber(tolua_S,(lua_Number)${in_value})"
    char: "tolua_pushnumber(tolua_S,(lua_Number)${in_value})"
    "long long": "tolua_pushnumber(tolua_S,(lua_Number)${in_value})"
    "std::string": "tolua_pushcppstring(tolua_S,(const char*)${in_value})"
    "const char*": "tolua_pushstring(tolua_S,(const char*)${in_value})"
    bool: "tolua_pushboolean(tolua_S,(bool)${in_value})"
    float: "tolua_pushnumber(tolua_S,(lua_Number)${in_value})"
    double: "tolua_pushnumber(tolua_S,(lua_Number)${in_value})"
    "Point": "${out_value} = ccpoint_to_jsval(cx, ${in_value})"
    "Rect": "${out_value} = ccrect_to_jsval(cx, ${in_value})"
    "Size": "${out_value} = ccsize_to_jsval(cx, ${in_value})"
    "const Color4B": "${out_value} = cccolor4b_to_jsval(cx, ${in_value})"
    "const Color4F": "${out_value} = cccolor4f_to_jsval(cx, ${in_value})"
    "const Color3B": "${out_value} = cccolor3b_to_jsval(cx, ${in_value})"
    "Color4B": "${out_value} = cccolor4b_to_jsval(cx, ${in_value})"
    "Color4F": "${out_value} = cccolor4f_to_jsval(cx, ${in_value})"
    "Color3B": "${out_value} = cccolor3b_to_jsval(cx, ${in_value})"
    "Array*": "${out_value} = ccarray_to_jsval(cx, ${in_value})"
    "Dictionary*": "${out_value} = ccdictionary_to_jsval(cx, ${in_value})"
    "AffineTransform": "${out_value} = ccaffinetransform_to_jsval(cx, ${in_value})"
    "FontDefinition": "${out_value} = FontDefinition_to_jsval(cx, ${in_value})"
    object: "tolua_pushusertype(tolua_S,${in_value},\"${ntype}\")"
